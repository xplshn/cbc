#!/usr/bin/env bash

OPWD="$PWD"
BASE="$(dirname "$(realpath "$0")")"
if [ "$OPWD" != "$BASE" ]; then
    echo "Changing to $BASE"
    cd "$BASE" || exit 1
fi
trap 'cd "$OPWD"' EXIT

CBC_EXE=../cbc
REF_B_EXE=b
libB="../lib/b/$(uname -m)-$(uname -s).b"
TIMEOUT_DURATION=5s

unset CFLAGS LDFLAGS
export NO_WRAPPER=1

if ! command -v "$REF_B_EXE" >/dev/null 2>&1; then
    printf "\033[91m[ERROR] Reference compiler 'b' not found in \$PATH.\033[0m\n"
    printf "Please install it from github.com/tsoding/b to run the test suite.\n"
    exit 1
fi

rm -rf ./output_cbc ./output_b ./output.qbe ./output.s

passed_count=0
failed_count=0
total_count=0

badFiles="./name.b ./snake.b ./brainfck.b ./game_of_life.b ./mandelbrot2.b"

for bfile in ./*.b; do
    skip=0
    for badfile in $badFiles; do
        [ "$bfile" = "$badfile" ] && skip=1 && break
    done
    [ "$skip" -eq 1 ] && continue

    [ -f "$bfile" ] || continue

    total_count=$((total_count + 1))
    printf -- "----------------------------------------------------------------------\n"
    printf "Testing \033[96m%s\033[0m...\n" "$bfile"

    if ! "$CBC_EXE" -o ./output_cbc "$libB" "$bfile" >./cbc.stdout 2>./cbc.stderr; then
        printf "\033[91m[COMPILE FAIL]\033[0m - CBC failed to compile %s\n" "$bfile"
        printf "\033[93mCBC STDERR:\033[0m\n"
        sed 's/^/    /' ./cbc.stderr
        failed_count=$((failed_count + 1))
        rm -f ./cbc.stdout ./cbc.stderr
        continue
    fi
    rm -f ./cbc.stdout ./cbc.stderr

    if ! "$REF_B_EXE" -o ./output_b "$bfile" >/dev/null 2>&1; then
        printf "\033[91m[REFERENCE COMPILE FAIL]\033[0m - 'b' failed to compile %s\n" "$bfile"
        failed_count=$((failed_count + 1))
        rm -f ./output_cbc
        continue
    fi

    test_failed=0

    test_cases=(
        "no_args" ""
        "string_arg" "test"
        "numeric_arg_pos" "5"
        "numeric_arg_neg" "-5"
    )

    for i in $(seq 0 2 $((${#test_cases[@]} - 1))); do
        test_name=${test_cases[$i]}
        test_arg=${test_cases[$((i+1))]}

        timeout "$TIMEOUT_DURATION" ./output_cbc $test_arg > cbc.stdout 2> cbc.stderr
        cbc_exit_code=$?

        timeout "$TIMEOUT_DURATION" ./output_b $test_arg > b.stdout 2> b.stderr
        b_exit_code=$?

        if [ "$cbc_exit_code" -eq 124 ]; then
            printf "  [\033[91mFAIL\033[0m] %-20s: CBC timed out.\n" "$test_name"
            test_failed=1
            break
        fi
        if [ "$b_exit_code" -eq 124 ]; then
            printf "  [\033[93mINFO\033[0m] %-20s: Reference 'b' timed out (might indicate an infinite loop in the test case).\n" "$test_name"
        fi

        diff_stdout=$(diff cbc.stdout b.stdout)
        diff_stderr=$(diff cbc.stderr b.stderr)

        if [ -n "$diff_stdout" ] || [ -n "$diff_stderr" ] || [ "$cbc_exit_code" -ne "$b_exit_code" ]; then
            printf "  [\033[91mFAIL\033[0m] %-20s: Mismatch found.\n" "$test_name"
            test_failed=1
            if [ "$cbc_exit_code" -ne "$b_exit_code" ]; then
                printf "    \033[91mExit Codes Differ\033[0m: CBC exited %d, 'b' exited %d\n" "$cbc_exit_code" "$b_exit_code"
            fi
            if [ -n "$diff_stdout" ]; then
                printf "    \033[91mSTDOUT Difference\033[0m:\n%s\n" "$diff_stdout"
            fi
            if [ -n "$diff_stderr" ]; then
                printf "    \033[91mSTDERR Difference\033[0m:\n%s\n" "$diff_stderr"
            fi
            break
        else
            printf "  [\033[92mPASS\033[0m] %-20s\n" "$test_name"
        fi
    done

    if [ "$test_failed" -eq 1 ]; then
        printf "\033[91m[FAIL]\033[0m - %s\n" "$bfile"
        failed_count=$((failed_count + 1))
    else
        printf "\033[92m[PASS]\033[0m - %s\n" "$bfile"
        passed_count=$((passed_count + 1))
    fi

    rm -f cbc.stdout cbc.stderr b.stdout b.stderr ./output_cbc ./output_b
done

printf -- "----------------------------------------------------------------------\n"
printf "\033[1mTest Summary:\033[0m \033[92m%d Passed\033[0m, \033[91m%d Failed\033[0m, %d Total\n" "$passed_count" "$failed_count" "$total_count"
printf -- "----------------------------------------------------------------------\n"

[ "$failed_count" -gt 0 ] && exit 1
exit 0
